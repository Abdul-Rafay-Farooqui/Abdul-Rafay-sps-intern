import { NextResponse } from 'next/server';

// Get the API key from the environment variable.
const API_KEY = process.env.NEXT_PUBLIC_GOOGLE_API_KEY;
const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=" + API_KEY;

export async function POST(req) {
  // It's crucial to handle requests with a try-catch block for robust error handling.
  try {
    const { messages } = await req.json();

    // Check if the API key is available.
    if (!API_KEY) {
      console.error("API_KEY is missing from environment variables.");
      return NextResponse.json({ error: "Server configuration error: API key not found." }, { status: 500 });
    }

    // Construct the payload for the Gemini API, ensuring the messages array is correctly formatted.
    const payload = {
      contents: messages.map(msg => ({
        role: msg.role === 'assistant' ? 'model' : 'user',
        parts: [{ text: msg.content }]
      })),
      tools: [{ "google_search": {} }],
      // Use the gemini-2.5-flash-preview-05-20 model for the response.
      model: "gemini-2.5-flash-preview-05-20"
    };

    // Make the API call to the Gemini API with exponential backoff for retries.
    const maxRetries = 3;
    let retries = 0;
    let apiResponse;
    while (retries < maxRetries) {
      try {
        apiResponse = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        if (apiResponse.ok) {
          break; // Success, exit the retry loop
        }
        
        // Handle API errors and retry with backoff
        const errorData = await apiResponse.json();
        console.error(`API call failed (retry ${retries + 1}):`, errorData);
        retries++;
        await new Promise(res => setTimeout(res, Math.pow(2, retries) * 1000)); // Exponential backoff
      } catch (err) {
        console.error(`Fetch request failed (retry ${retries + 1}):`, err);
        retries++;
        await new Promise(res => setTimeout(res, Math.pow(2, retries) * 1000));
      }
    }

    if (!apiResponse || !apiResponse.ok) {
      throw new Error("Failed to get a response from the API after multiple retries.");
    }
    
    const result = await apiResponse.json();
    const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;

    // Check if the generated text is valid.
    if (!generatedText) {
      console.error("No text was generated by the API.");
      return NextResponse.json({ error: "Failed to generate a response." }, { status: 500 });
    }

    // Return the generated text to the frontend.
    return NextResponse.json({ text: generatedText });

  } catch (error) {
    console.error("Error in API route:", error);
    // Return a more descriptive error message to the client.
    return NextResponse.json({ error: "An unexpected error occurred. Please try again later." }, { status: 500 });
  }
}